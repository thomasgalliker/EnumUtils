####################################################################
# VSTS Build Configuration
#
# (c)2018 superdev GmbH
####################################################################

name: 2.0.$(date:yy)$(DayOfYear).$(rev:rr)
  
queue:
  name: Hosted VS2017
  demands: 
  - msbuild
  - visualstudio
  - vstest

trigger:
- master
- develop
- release/*

steps:
- task: bleddynrichards.Assembly-Info-Task.Assembly-Info-Task.Assembly-Info-Task@1
  displayName: 'Set Assembly Manifest Data'
  inputs:
    FileNames: |
     $(Parameters.csproj)

    InsertAttributes: true

    VersionNumber: '$(Build.BuildNumber)'

    FileVersionNumber: '$(Build.BuildNumber)'


- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.4.1'
  inputs:
    versionSpec: 4.4.1


- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: '$(Parameters.solution)'


- powershell: |
   $branch1="develop"
   $branch2="master"
   
   [String]$buildNumber= $Env:BUILD_BUILDNUMBER
   [String]$rev = $buildNumber.Substring($buildNumber.LastIndexOf('.') + 1)
   echo "rev=$rev"
   
   if ("$(Build.SourceBranchName)" -eq $branch1)
   {
     echo "the build is on $branch1"
   
     Write-Host "##vso[task.setvariable variable=PackageVersion]$(Build.BuildNumber)$(BuildVersionPostfix)"
   }
   elseif ("$(Build.SourceBranchName)" -eq $branch2)
   {
     echo "the build is on $branch2"
     Write-Host "##vso[task.setvariable variable=PackageVersion]$(Build.BuildNumber)"
   }
   else
   {
     echo "it's either on $branch1 branch nor $branch2 branch"
   } 
  displayName: 'Set PackageVersion'

- task: VSBuild@1
  displayName: 'Build solution'
  inputs:
    solution: '$(Parameters.solution)'
    msbuildArgs: ''
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run UnitTests'
  inputs:
    command: test
    projects: '**/*.Tests.csproj '
    arguments: ''

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack'
  inputs:
    command: pack
    packagesToPack: EnumUtils/EnumUtils.csproj
    versioningScheme: byEnvVar
    versionEnvVar: PackageVersion

- task: PublishSymbols@2
  displayName: 'Publish symbols path'
  inputs:
    SearchPattern: '**\bin\**\*.pdb'

    PublishSymbols: false

  continueOnError: true

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'

    Contents: |
     **\bin\$(BuildConfiguration)\**
     **\bin\*.nupkg

    TargetFolder: '$(Build.ArtifactStagingDirectory)'


- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'

